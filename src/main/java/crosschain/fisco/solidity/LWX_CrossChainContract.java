package crosschain.fisco.solidity;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class LWX_CrossChainContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","90815260200160002054905060006006600060095486604051602001615004929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020549050828101905080600660006009548760405160200161504a929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020819055508282039150816006600060095488604051602001615091929190617c9f565b60405160208183030381529060405280519060200120815260200190815260200160002081905550505050505050565b6000828060200190518101906150d79190616ed0565b5050509150508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015615123573d6000803e3d6000fd5b50505050565b60006060838060200190518101906151419190616cf9565b92505050600081511461516f576000818060200190518101906151649190616ed0565b505050915050809250505b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156151b5573d6000803e3d6000fd5b5050505050565b6151c461649f565b6040516020016151d390617c21565b60405160208183030381529060405280519060200120836040516020016151fa9190617bde565b604051602081830303815290604052805190602001201415615225576152203083615aeb565b615265565b6040518060400160405280600481526020017f544f444f000000000000000000000000000000000000000000000000000000008152508461012001819052505b8390509392505050565b61527761649f565b60405160200161528690617c21565b60405160208183030381529060405280519060200120836040516020016152ad9190617bde565b60405160208183030381529060405280519060200120141561535357600060036000815481106152d957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561534c573d6000803e3d6000fd5b5050615393565b6040518060400160405280600481526020017f544f444f000000000000000000000000000000000000000000000000000000008152508461012001819052505b8390509392505050565b6153a561649f565b6040516020016153b490617c21565b60405160208183030381529060405280519060200120836040516020016153db9190617bde565b604051602081830303815290604052805190602001201415615481576000600360008154811061540757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561547a573d6000803e3d6000fd5b50506154c1565b6040518060400160405280600481526020017f544f444f000000000000000000000000000000000000000000000000000000008152508461012001819052505b8390509392505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614615539576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615530906181f1565b60405180910390fd5b8160405160200161554a9190617bde565b6040516020818303038152906040528051906020012060026040516020016155729190617bf5565b60405160208183030381529060405280519060200120146155c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016155bf90617fd7565b60405180910390fd5b6000818060200190518101906155de9190616e53565b90506155ee600954333084615bb2565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614615662576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615659906181f1565b60405180910390fd5b816040516020016156739190617bde565b60405160208183030381529060405280519060200120600260405160200161569b9190617bf5565b60405160208183030381529060405280519060200120146156f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016156e890617fd7565b60405180910390fd5b6000818060200190518101906157079190616ed0565b50505091505034811461574f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161574690617fb7565b60405180910390fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146157c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016157ba906181f1565b60405180910390fd5b816040516020016157d49190617bde565b6040516020818303038152906040528051906020012060026040516020016157fc9190617bf5565b6040516020818303038152906040528051906020012014615852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161584990617fd7565b60405180910390fd5b6060818060200190518101906158689190616cf9565b9250505060008151146158d55760008280602001905181019061588b9190616ed0565b5050509150503481146158d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016158ca90617fb7565b60405180910390fd5b505b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060405136600082376000803683855af43d806000843e8160008114615924578184f35b8184fd5b6060600033600854604051602001615941929190617b21565b604051602081830303815290604052805190602001209050600860008154809291906001019190505550606061597682615ddf565b9050606061598682602080615fd0565b9050615a17615a116159d66159d0896040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250616168565b88616168565b6040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250616168565b82616168565b935050505092915050565b60006006600060095485604051602001615a3d929190617c9f565b6040516020818303038152906040528051906020012081526020019081526020016000205490508181019050806006600060095486604051602001615a83929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020819055507f5f1068768365b85f6b8b28ccde7ace47d808e3d2142116954f97e8b6ea7e0a2f308484604051615ade9392919061816b565b60405180910390a1505050565b60006006600060095485604051602001615b06929190617c9f565b6040516020818303038152906040528051906020012081526020019081526020016000205490508181039050806006600060095486604051602001615b4c929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020819055507fbe7b25e9ec129e97fdee4f413f15b81d90f33681fd891e02de65d4adb98552153083604051615ba59291906181b5565b60405180910390a1505050565b60008111615bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615bec90617f77565b60405180910390fd5b6000600660008686604051602001615c0e929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020549050818111615c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615c6e90617e14565b60405180910390fd5b6000615c838585610368565b9050828111615cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615cbe90617ed7565b60405180910390fd5b6000600660008887604051602001615ce0929190617c9f565b604051602081830303815290604052805190602001208152602001908152602001600020549050838101905080600660008988604051602001615d24929190617c9f565b60405160208183030381529060405280519060200120815260200190815260200160002081905550838303925082600660008989604051602001615d69929190617c9f565b60405160208183030381529060405280519060200120815260200190815260200160002081905550838203915081600760008888604051602001615dae929190617b58565b6040516020818303038152906040528051906020012081526020019081526020016000208190555050505050505050565b60608082604051602001615df39190617b84565b604051602081830303815290604052905060606040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506060600283510260020167ffffffffffffffff81118015615e5e57600080fd5b506040519080825280601f01601f191660200182016040528015615e915781602001600182028036833780820191505090505b50905060008090505b8351811015615fc457826004858381518110615eb257fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110615ef157fe5b602001015160f81c60f81b826002830260000181518110615f0e57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b858381518110615f4f57fe5b602001015160f81c60f81b1660f81c60ff1681518110615f6b57fe5b602001015160f81c60f81b826002830260010181518110615f8857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050615e9a565b50809350505050919050565b60606000821415615ff2576040","51806020016040528060008152509050616161565b6000809050600080905060008090506000809050606088905060008090505b8151841015616055578883141561602a57839550600190505b87890183141561603a5785840394505b61604482856161f6565b840193508280600101935050616011565b8789018314156160655785840394505b806160a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161609c90617f57565b60405180910390fd5b60008514156160e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016160e090618017565b60405180910390fd5b60608567ffffffffffffffff8111801561610257600080fd5b506040519080825280601f01601f1916602001820160405280156161355781602001600182028036833780820191505090505b50905060008060208d019150602083019050616154818a84018a616456565b8299505050505050505050505b9392505050565b6060815183510167ffffffffffffffff8111801561618557600080fd5b506040519080825280601f01601f1916602001820160405280156161b85781602001600182028036833780820191505090505b50905060008060006020860192506020850191506020840190506161de81848851616456565b6161ed86518201838751616456565b50505092915050565b60008060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600784848151811061622c57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561628c5760019050616450565b600660f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660058484815181106162c157fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156163215760029050616450565b600e60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600484848151811061635657fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156163b65760039050616450565b601e60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660038484815181106163eb57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561644b5760049050616450565b600190505b92915050565b5b6020811061647a5781518352602083019250602082019150602081039050616457565b60006001826020036101000a0390508019835116818551168181178652505050505050565b6040518061026001604052806060815260200160608152602001606081526020016060815260200160608152602001600060ff16815260200160608152602001606081526020016060815260200160608152602001606081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106165a157805160ff19168380011785556165cf565b828001600101855582156165cf579182015b828111156165ce5782518255916020019190600101906165b3565b5b5090506165dc9190616660565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061662157805160ff191683800117855561664f565b8280016001018555821561664f579182015b8281111561664e578251825591602001919060010190616633565b5b50905061665c9190616660565b5090565b61668291905b8082111561667e576000816000905550600101616666565b5090565b90565b600081359050616694816184fe565b92915050565b6000813590506166a981618515565b92915050565b600082601f8301126166c057600080fd5b81356166d36166ce826182c8565b61829b565b915080825260208301602083018583830111156166ef57600080fd5b6166fa83828461844a565b50505092915050565b600082601f83011261671457600080fd5b8151616727616722826182c8565b61829b565b9150808252602083016020830185838301111561674357600080fd5b61674e838284618459565b50505092915050565b600082601f83011261676857600080fd5b813561677b616776826182f4565b61829b565b9150808252602083016020830185838301111561679757600080fd5b6167a283828461844a565b50505092915050565b600082601f8301126167bc57600080fd5b81516167cf6167ca826182f4565b61829b565b915080825260208301602083018583830111156167eb57600080fd5b6167f6838284618459565b50505092915050565b60008135905061680e8161852c565b92915050565b6000815190506168238161852c565b92915050565b60008135905061683881618543565b92915050565b60006020828403121561685057600080fd5b600061685e84828501616685565b91505092915050565b6000806040838503121561687a57600080fd5b600061688885828601616685565b925050602061689985828601616685565b9150509250929050565b6000806000606084860312156168b857600080fd5b60006168c686828701616685565b93505060206168d786828701616685565b92505060406168e8868287016167ff565b9150509250925092565b60008060008060008060008060006101208a8c03121561691157600080fd5b600061691f8c828d01616685565b99505060208a013567ffffffffffffffff81111561693c57600080fd5b6169488c828d01616757565b98505060408a013567ffffffffffffffff81111561696557600080fd5b6169718c828d01616757565b97505060608a013567ffffffffffffffff81111561698e57600080fd5b61699a8c828d01616757565b96505060806169ab8c828d01616829565b95505060a08a013567ffffffffffffffff8111156169c857600080fd5b6169d48c828d016166af565b94505060c08a013567ffffffffffffffff8111156169f157600080fd5b6169fd8c828d01616757565b93505060e08a013567ffffffffffffffff811115616a1a57600080fd5b616a268c828d01616757565b9250506101008a013567ffffffffffffffff811115616a4457600080fd5b616a508c828d01616757565b9150509295985092959850929598565b60008060408385031215616a7357600080fd5b6000616a8185828601616685565b9250506020616a92858286016167ff565b9150509250929050565b600060208284031215616aae57600080fd5b600082013567ffffffffffffffff811115616ac857600080fd5b616ad484828501616757565b91505092915050565b60008060408385031215616af057600080fd5b600083013567ffffffffffffffff811115616b0a57600080fd5b616b1685828601616757565b9250506020616b278582860161669a565b9150509250929050565b60008060008060008060008060008060006101608c8e031215616b5357600080fd5b60008c013567ffffffffffffffff811115616b6d57600080fd5b616b798e828f01616757565b9b50506020616b8a8e828f0161669a565b9a505060408c013567ffffffffffffffff811115616ba757600080fd5b616bb38e828f01616757565b99505060608c013567ffffffffffffffff811115616bd057600080fd5b616bdc8e828f01616757565b9850506080616bed8e828f01616829565b97505060a08c013567ffffffffffffffff811115616c0a57600080fd5b616c168e828f01616757565b96505060c08c013567ffffffffffffffff811115616c3357600080fd5b616c3f8e828f016166af565b95505060e08c013567ffffffffffffffff811115616c5c57600080fd5b616c688e828f01616757565b9450506101008c013567ffffffffffffffff811115616c8657600080fd5b616c928e828f01616757565b9350506101208c013567ffffffffffffffff811115616cb057600080fd5b616cbc8e828f01616757565b9250506101408c013567ffffffffffffffff811115616cda57600080fd5b616ce68e828f016166af565b9150509295989b509295989b9093969950565b600080600060608486031215616d0e57600080fd5b600084015167ffffffffffffffff811115616d2857600080fd5b616d34868287016167ab565b935050602084015167ffffffffffffffff811115616d5157600080fd5b616d5d86828701616703565b925050604084015167ffffffffffffffff811115616d7a57600080fd5b616d8686828701616703565b9150509250925092565b60008060008060808587031215616da657600080fd5b600085013567ffffffffffffffff811115616dc057600080fd5b616dcc87828801616757565b945050602085013567ffffffffffffffff811115616de957600080fd5b616df587828801616757565b935050604085013567ffffffffffffffff811115616e1257600080fd5b616e1e87828801616757565b925050606085013567ffffffffffffffff811115616e3b57600080fd5b616e47878288016166af565b91505092959194509250565b600060208284031215616e6557600080fd5b6000616e7384828501616814565b91505092915050565b60008060408385031215616e8f57600080fd5b6000616e9d85828601616814565b925050602083015167ffffffffffffffff811115616eba57600080fd5b616ec6858286016167ab565b9150509250929050565b600080600080600060a08688031215616ee857600080fd5b6000616ef688828901616814565b9550506020616f0788828901616814565b945050604086015167ffffffffffffffff811115616f2457600080fd5b616f30888289016167ab565b9350506060616f4188828901616814565b925050608086015167ffffffffffffffff811115616f5e57600080fd5b616f6a888289016167ab565b9150509295509295909350565b616f8081618414565b82525050565b616f97616f9282618395565b61849e565b82525050565b616fa681618383565b82525050565b616fbd616fb882618383565b61848c565b82525050565b616fd4616fcf826183a7565b6184b0565b82525050565b616feb","","90508181036000830152617ff0816175ab565b9050919050565b60006020820190508181036000830152618010816175eb565b9050919050565b600060208201905081810360008301526180308161762b565b9050919050565b600060208201905081810360008301526180508161766b565b9050919050565b60006020820190508181036000830152618070816176d1565b9050919050565b6000602082019050818103600083015261809081617711565b9050919050565b600060208201905081810360008301526180b081617791565b9050919050565b600060608201905081810360008301526180d081617811565b905081810360208301526180e4818561705b565b90506180f36040830184617af7565b9392505050565b6000604082019050818103600083015261811381617851565b90506181226020830184616f77565b92915050565b60006060820190508181036000830152618141816178eb565b90508181036020830152618155818561705b565b90506181646040830184617af7565b9392505050565b600060808201905081810360008301526181848161792b565b90506181936020830186616f9d565b6181a06040830185616f9d565b6181ad6060830184617ad1565b949350505050565b600060608201905081810360008301526181ce816179eb565b90506181dd6020830185616f9d565b6181ea6040830184617ad1565b9392505050565b6000602082019050818103600083015261820a81617a2b565b9050919050565b60006020820190506182266000830184617ad1565b92915050565b600060c0820190506182416000830189617ad1565b8181036020830152618253818861705b565b90506182626040830187616f9d565b61826f6060830186617ad1565b8181036080830152618281818561705b565b905061829060a0830184616f9d565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156182be57600080fd5b8060405250919050565b600067ffffffffffffffff8211156182df57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561830b57600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061838e826183dd565b9050919050565b60006183a0826183dd565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061841f82618426565b9050919050565b600061843182618438565b9050919050565b6000618443826183dd565b9050919050565b82818337600083830152505050565b60005b8381101561847757808201518184015260208101905061845c565b83811115618486576000848401525b50505050565b6000618497826184c4565b9050919050565b60006184a9826184c4565b9050919050565b6000819050919050565b6000819050919050565b60006184cf826184f1565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b61850781618383565b811461851257600080fd5b50565b61851e81618395565b811461852957600080fd5b50565b618535816183fd565b811461854057600080fd5b50565b61854c81618407565b811461855757600080fd5b5056fea2646970667358221220a078c476323dd0b4ca86cb9576df2be02d3ad599f9d2b2a29524a362101b991564736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","","","","","20820190508181036000830152617ff38161759f565b9050919050565b60006020820190508181036000830152618013816175df565b9050919050565b6000602082019050818103600083015261803381617685565b9050919050565b60006020820190508181036000830152618053816176c5565b9050919050565b600060408201905081810360008301526180738161776b565b90506180826020830184616f77565b92915050565b600060608201905081810360008301526180a1816177eb565b905081810360208301526180b5818561705b565b90506180c46040830184617af7565b9392505050565b600060208201905081810360008301526180e48161782b565b9050919050565b60006020820190508181036000830152618104816178eb565b9050919050565b600060608201905081810360008301526181248161792b565b90506181336020830185616f9d565b6181406040830184617ad1565b9392505050565b600060208201905081810360008301526181608161796b565b9050919050565b60006020820190508181036000830152618180816179ab565b9050919050565b600060208201905081810360008301526181a0816179eb565b9050919050565b600060808201905081810360008301526181c081617a51565b90506181cf6020830186616f9d565b6181dc6040830185616f9d565b6181e96060830184617ad1565b949350505050565b6000602082019050818103600083015261820a81617a91565b9050919050565b60006020820190506182266000830184617ad1565b92915050565b600060c0820190506182416000830189617ad1565b8181036020830152618253818861705b565b90506182626040830187616f9d565b61826f6060830186617ad1565b8181036080830152618281818561705b565b905061829060a0830184616f9d565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156182be57600080fd5b8060405250919050565b600067ffffffffffffffff8211156182df57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561830b57600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061838e826183dd565b9050919050565b60006183a0826183dd565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061841f82618426565b9050919050565b600061843182618438565b9050919050565b6000618443826183dd565b9050919050565b82818337600083830152505050565b60005b8381101561847757808201518184015260208101905061845c565b83811115618486576000848401525b50505050565b6000618497826184c4565b9050919050565b60006184a9826184c4565b9050919050565b6000819050919050565b6000819050919050565b60006184cf826184f1565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b61850781618383565b811461851257600080fd5b50565b61851e81618395565b811461852957600080fd5b50565b618535816183fd565b811461854057600080fd5b50565b61854c81618407565b811461855757600080fd5b5056fea2646970667358221220353a951ec0aa0fdf20bb2d01149f6185a81ff4e429fe246dd08c6681da1e800964736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"sendAckedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"sendTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain_Code\",\"type\":\"string\"}],\"name\":\"setChainCodeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway_Address\",\"type\":\"address\"}],\"name\":\"setGatewayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"startTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeOutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"}],\"name\":\"getCrossTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"}],\"name\":\"getCrossTxSendAndAckProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainAdd\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txResult\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"sendAcked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"srcBid\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"destAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"srcChainCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destChainCode\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"sendTx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chaincode\",\"type\":\"string\"}],\"name\":\"setChainCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatewayAddress\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destBid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"srcChainCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destChainCode\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"startTx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETALLOWANCE = "getAllowance";

    public static final String FUNC_GETCROSSTX = "getCrossTx";

    public static final String FUNC_GETCROSSTXSENDANDACKPROOF = "getCrossTxSendAndAckProof";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SENDACKED = "sendAcked";

    public static final String FUNC_SENDTX = "sendTx";

    public static final String FUNC_SETCHAINCODE = "setChainCode";

    public static final String FUNC_SETGATEWAY = "setGateway";

    public static final String FUNC_STARTTX = "startTx";

    public static final String FUNC_TAKEOUT = "takeOut";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event ASSETBURNEVENT_EVENT = new Event("AssetBurnEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETMINTEVENT_EVENT = new Event("AssetMintEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVEEVENT_EVENT = new Event("approveEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDACKEDEVENT_EVENT = new Event("sendAckedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SENDTXEVENT_EVENT = new Event("sendTxEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SETCHAINCODEEVENT_EVENT = new Event("setChainCodeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETGATEWAYEVENT_EVENT = new Event("setGatewayEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event STARTTXEVENT_EVENT = new Event("startTxEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event TAKEOUTEVENT_EVENT = new Event("takeOutEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("transferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected LWX_CrossChainContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<AssetBurnEventEventResponse> getAssetBurnEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETBURNEVENT_EVENT, transactionReceipt);
        ArrayList<AssetBurnEventEventResponse> responses = new ArrayList<AssetBurnEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AssetBurnEventEventResponse typedResponse = new AssetBurnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAssetBurnEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETBURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAssetBurnEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETBURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AssetMintEventEventResponse> getAssetMintEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETMINTEVENT_EVENT, transactionReceipt);
        ArrayList<AssetMintEventEventResponse> responses = new ArrayList<AssetMintEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AssetMintEventEventResponse typedResponse = new AssetMintEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAssetMintEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETMINTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAssetMintEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETMINTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveEventEventResponse> getApproveEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEEVENT_EVENT, transactionReceipt);
        ArrayList<ApproveEventEventResponse> responses = new ArrayList<ApproveEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveEventEventResponse typedResponse = new ApproveEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SendAckedEventEventResponse> getSendAckedEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDACKEDEVENT_EVENT, transactionReceipt);
        ArrayList<SendAckedEventEventResponse> responses = new ArrayList<SendAckedEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendAckedEventEventResponse typedResponse = new SendAckedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSendAckedEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDACKEDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSendAckedEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDACKEDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SendTxEventEventResponse> getSendTxEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDTXEVENT_EVENT, transactionReceipt);
        ArrayList<SendTxEventEventResponse> responses = new ArrayList<SendTxEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendTxEventEventResponse typedResponse = new SendTxEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSendTxEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSendTxEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetChainCodeEventEventResponse> getSetChainCodeEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETCHAINCODEEVENT_EVENT, transactionReceipt);
        ArrayList<SetChainCodeEventEventResponse> responses = new ArrayList<SetChainCodeEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetChainCodeEventEventResponse typedResponse = new SetChainCodeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chain_Code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetChainCodeEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETCHAINCODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetChainCodeEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETCHAINCODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetGatewayEventEventResponse> getSetGatewayEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETGATEWAYEVENT_EVENT, transactionReceipt);
        ArrayList<SetGatewayEventEventResponse> responses = new ArrayList<SetGatewayEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetGatewayEventEventResponse typedResponse = new SetGatewayEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.gateway_Address = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetGatewayEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETGATEWAYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetGatewayEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETGATEWAYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StartTxEventEventResponse> getStartTxEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(STARTTXEVENT_EVENT, transactionReceipt);
        ArrayList<StartTxEventEventResponse> responses = new ArrayList<StartTxEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            StartTxEventEventResponse typedResponse = new StartTxEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStartTxEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STARTTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStartTxEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STARTTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TakeOutEventEventResponse> getTakeOutEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TAKEOUTEVENT_EVENT, transactionReceipt);
        ArrayList<TakeOutEventEventResponse> responses = new ArrayList<TakeOutEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TakeOutEventEventResponse typedResponse = new TakeOutEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTakeOutEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TAKEOUTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTakeOutEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TAKEOUTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt approve(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approve(String from, String to, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger balanceOf(String addr) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAllowance(String owner, String spender) throws ContractException {
        final Function function = new Function(FUNC_GETALLOWANCE, 
                Arrays.<Type>asList(new Address(owner),
                new Address(spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple12<String, String, String, String, BigInteger, byte[], String, String, String, String, String, String> getCrossTx(String crossTxNo) throws ContractException {
        final Function function = new Function(FUNC_GETCROSSTX, 
                Arrays.<Type>asList(new Utf8String(crossTxNo)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple12<String, String, String, String, BigInteger, byte[], String, String, String, String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (byte[]) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue(), 
                (String) results.get(10).getValue(), 
                (String) results.get(11).getValue());
    }

    public Tuple6<BigInteger, String, String, BigInteger, String, String> getCrossTxSendAndAckProof(String crossTxNo) throws ContractException {
        final Function function = new Function(FUNC_GETCROSSTXSENDANDACKPROOF, 
                Arrays.<Type>asList(new Utf8String(crossTxNo)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, String, String, BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public String getVersion() throws ContractException {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt initialize(String crossChainAdd) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initialize(String crossChainAdd, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitialize(String crossChainAdd) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitializeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt sendAcked(String crossTxNo, String txResult, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Utf8String(txResult),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sendAcked(String crossTxNo, String txResult, String version, byte[] proof, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Utf8String(txResult),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendAcked(String crossTxNo, String txResult, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Utf8String(txResult),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, byte[]> getSendAckedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDACKED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public TransactionReceipt sendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple11<String, String, String, String, BigInteger, String, byte[], String, String, String, byte[]> getSendTxInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple11<String, String, String, String, BigInteger, String, byte[], String, String, String, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (byte[]) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue(), 
                (byte[]) results.get(10).getValue()
                );
    }

    public TransactionReceipt setChainCode(String chaincode) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chaincode)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setChainCode(String chaincode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chaincode)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetChainCode(String chaincode) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chaincode)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetChainCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGateway(String gatewayAddress) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGateway(String gatewayAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGateway(String gatewayAddress) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGatewayInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGATEWAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt startTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void startTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<String, String, String, String, BigInteger, byte[], String, String, String> getStartTxInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STARTTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, String, String, String, BigInteger, byte[], String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (byte[]) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public TransactionReceipt takeOut(String crossTxNo, String to) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void takeOut(String crossTxNo, String to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTakeOut(String crossTxNo, String to) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getTakeOutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TAKEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String to, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public static LWX_CrossChainContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new LWX_CrossChainContract(contractAddress, client, credential);
    }

    public static LWX_CrossChainContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(LWX_CrossChainContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AssetBurnEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String from;

        public BigInteger value;
    }

    public static class AssetMintEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ApproveEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public BigInteger value;
    }

    public static class SendAckedEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class SendTxEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class SetChainCodeEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String chain_Code;
    }

    public static class SetGatewayEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String gateway_Address;
    }

    public static class StartTxEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class TakeOutEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String to;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public BigInteger value;
    }
}
