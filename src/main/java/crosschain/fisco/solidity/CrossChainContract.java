package crosschain.fisco.solidity;

//solidity/;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class CrossChainContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","","2001828054600181600116156101000203166002900480156120415780601f1061201657610100808354040283529160200191612041565b820191906000526020600020905b81548152906001019060200180831161202457829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001600d820160405180606001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121575780601f1061212c57610100808354040283529160200191612157565b820191906000526020600020905b81548152906001019060200180831161213a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001601082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122535780601f1061222857610100808354040283529160200191612253565b820191906000526020600020905b81548152906001019060200180831161223657829003601f168201915b505050505081526020016011820160009054906101000a900460ff16600281111561227a57fe5b600281111561228557fe5b8152505090506000600281111561229857fe5b816101c0015160028111156122a957fe5b146122e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e090616d27565b60405180910390fd5b6003808111156122f557fe5b816101000151600381111561230657fe5b148061232d57506002600381111561231a57fe5b816101000151600381111561232b57fe5b145b61236c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236390616d07565b60405180910390fd5b606061237733613a4f565b9050816060015160405160200161238e9190616ada565b60405160208183030381529060405280519060200120816040516020016123b59190616ada565b604051602081830303815290604052805190602001201461240b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240290616eaa565b60405180910390fd5b6001600281111561241857fe5b826101200151600281111561242957fe5b14612469576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246090616daa565b60405180910390fd5b60008260a0015160ff16141561248d576124888260c00151308561429d565b6124d1565b60018260a0015160ff1614156124b0576124ab8260c00151846143cf565b6124d0565b60028260a0015160ff1614156124cf576124ce8260c0015184614437565b5b5b5b600282610120019060028111156124e457fe5b908160028111156124f157fe5b8152505081600560008660405160200161250b9190616ada565b604051602081830303815290604052805190602001208152602001908152602001600020600082015181600001908051906020019061254b92919061557b565b50602082015181600101908051906020019061256892919061557b565b50604082015181600201908051906020019061258592919061557b565b5060608201518160030190805190602001906125a292919061557b565b5060808201518160040190805190602001906125bf92919061557b565b5060a08201518160050160006101000a81548160ff021916908360ff16021790555060c08201518160060190805190602001906125fd9291906155fb565b5060e082015181600701908051906020019061261a92919061557b565b506101008201518160080160006101000a81548160ff0219169083600381111561264057fe5b02179055506101208201518160080160016101000a81548160ff0219169083600281111561266a57fe5b021790555061014082015181600901908051906020019061268c92919061557b565b5061016082015181600a016000820151816000015560208201518160010190805190602001906126bd92919061557b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061018082015181600d0160008201518160000155602082015181600101908051906020019061273792919061557b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101a082015181601001908051906020019061279e92919061557b565b506101c08201518160110160006101000a81548160ff021916908360028111156127c457fe5b02179055509050507f16b51c12ab04ae685dfc370798c92fe6828b7cc8712da10be3240ec920e4204b836040516127fb9190616fad565b60405180910390a150505050565b8060405160200161281a9190616ada565b6040516020818303038152906040528051906020012060046040516020016128429190616af1565b6040516020818303038152906040528051906020012014612898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288f90616f4a565b60405180910390fd5b60008560ff1614806128ad575060018560ff16145b806128bb575060028560ff16145b6128fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f190616ce7565b60405180910390fd5b60008560ff161415612916576129118988866144ca565b61293f565b60018560ff1614156129325761292d8988866145f3565b61293e565b61293d898886614754565b5b5b606061294a8a613a4f565b905061295461549e565b612974828b8b8b8b8b600060405180602001604052806000815250613cfa565b905084816101400181905250838160e0018190525082816101a00181905250806005600083600001516040516020016129ad9190616ada565b60405160208183030381529060405280519060200120815260200190815260200160002060008201518160000190805190602001906129ed92919061557b565b506020820151816001019080519060200190612a0a92919061557b565b506040820151816002019080519060200190612a2792919061557b565b506060820151816003019080519060200190612a4492919061557b565b506080820151816004019080519060200190612a6192919061557b565b5060a08201518160050160006101000a81548160ff021916908360ff16021790555060c0820151816006019080519060200190612a9f9291906155fb565b5060e0820151816007019080519060200190612abc92919061557b565b506101008201518160080160006101000a81548160ff02191690836003811115612ae257fe5b02179055506101208201518160080160016101000a81548160ff02191690836002811115612b0c57fe5b0217905550610140820151816009019080519060200190612b2e92919061557b565b5061016082015181600a01600082015181600001556020820151816001019080519060200190612b5f92919061557b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061018082015181600d01600082015181600001556020820151816001019080519060200190612bd992919061557b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101a0820151816010019080519060200190612c4092919061557b565b506101c08201518160110160006101000a81548160ff02191690836002811115612c6657fe5b02179055509050507fa708820a3dffc653e7997895bbd91de60498807398b93ef30dfddeda42d2bea4816000015188604051612ca3929190616f6a565b60405180910390a15050505050505050505050565b60006006600060095484604051602001612cd3929190616b1d565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d86906170a4565b60405180910390fd5b612d976148da565b50565b612da26148da565b5050565b60001515600a60009054906101000a900460ff16151514612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df390616e4a565b60405180910390fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600281526020017f563100000000000000000000000000000000000000000000000000000000000081525060049080519060200190612e8892919061557b565b506000600981905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60006101000a81548160ff02191690831515021790555050565b612ef76148da565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f83906170a4565b60405180910390fd5b612f946148da565b50565b60608060008060006060806060612fac61549e565b600560008b604051602001612fc19190616ada565b6040516020818303038152906040528051906020012081526020019081","","51613fe99190616ac3565b60006040518083038185875af1925050503d8060008114614026576040519150601f19603f3d011682016040523d82523d6000602084013e61402b565b606091505b505090508061406f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161406690616dea565b60405180910390fd5b50505050505050565b61408061549e565b6001600381111561408d57fe5b83600381111561409957fe5b14156140ae576140a93083614aea565b6140d3565b600184610120019060028111156140c157fe5b908160028111156140ce57fe5b815250505b8390509392505050565b6140e561549e565b600160038111156140f257fe5b8360038111156140fe57fe5b141561418e576000600360008154811061411457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614187573d6000803e3d6000fd5b50506141b3565b600184610120019060028111156141a157fe5b908160028111156141ae57fe5b815250505b8390509392505050565b6141c561549e565b600160038111156141d257fe5b8360038111156141de57fe5b141561426e57600060036000815481106141f457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614267573d6000803e3d6000fd5b5050614293565b6001846101200190600281111561428157fe5b9081600281111561428e57fe5b815250505b8390509392505050565b6000838060200190518101906142b39190615ea2565b9050600060066000600954866040516020016142d0929190616b1d565b60405160208183030381529060405280519060200120815260200190815260200160002054905060006006600060095486604051602001614312929190616b1d565b6040516020818303038152906040528051906020012081526020019081526020016000205490508281019050806006600060095487604051602001614358929190616b1d565b60405160208183030381529060405280519060200120815260200190815260200160002081905550828203915081600660006009548860405160200161439f929190616b1d565b60405160208183030381529060405280519060200120815260200190815260200160002081905550505050505050565b6000828060200190518101906143e59190615f1f565b5050509150508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015614431573d6000803e3d6000fd5b50505050565b600060608380602001905181019061444f9190615d60565b92505050600081511461447d576000818060200190518101906144729190615f1f565b505050915050809250505b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156144c3573d6000803e3d6000fd5b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614614538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161452f906170c4565b60405180910390fd5b816040516020016145499190616ada565b6040516020818303038152906040528051906020012060026040516020016145719190616af1565b60405160208183030381529060405280519060200120146145c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016145be90616e8a565b60405180910390fd5b6000818060200190518101906145dd9190615ea2565b90506145ed600954333084614bb1565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614614661576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614658906170c4565b60405180910390fd5b816040516020016146729190616ada565b60405160208183030381529060405280519060200120600260405160200161469a9190616af1565b60405160208183030381529060405280519060200120146146f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146e790616e8a565b60405180910390fd5b6000818060200190518101906147069190615f1f565b50505091505034811461474e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161474590616e6a565b60405180910390fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146147c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147b9906170c4565b60405180910390fd5b816040516020016147d39190616ada565b6040516020818303038152906040528051906020012060026040516020016147fb9190616af1565b6040516020818303038152906040528051906020012014614851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161484890616e8a565b60405180910390fd5b6060818060200190518101906148679190615d60565b9250505060008151146148d45760008280602001905181019061488a9190615f1f565b5050509150503481146148d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148c990616e6a565b60405180910390fd5b505b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060405136600082376000803683855af43d806000843e8160008114614923578184f35b8184fd5b6060600033600854604051602001614940929190616a1d565b604051602081830303815290604052805190602001209050600860008154809291906001019190505550606061497582614dde565b9050606061498582602080614fcf565b9050614a16614a106149d56149cf896040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250615167565b88615167565b6040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250615167565b82615167565b935050505092915050565b60006006600060095485604051602001614a3c929190616b1d565b6040516020818303038152906040528051906020012081526020019081526020016000205490508181019050806006600060095486604051602001614a82929190616b1d565b604051602081830303815290604052805190602001208152602001908152602001600020819055507f5f1068768365b85f6b8b28ccde7ace47d808e3d2142116954f97e8b6ea7e0a2f308484604051614add9392919061701e565b60405180910390a1505050565b60006006600060095485604051602001614b05929190616b1d565b6040516020818303038152906040528051906020012081526020019081526020016000205490508181039050806006600060095486604051602001614b4b929190616b1d565b604051602081830303815290604052805190602001208152602001908152602001600020819055507fbe7b25e9ec129e97fdee4f413f15b81d90f33681fd891e02de65d4adb98552153083604051614ba4929190617068565b60405180910390a1505050565b60008111614bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614beb90616e2a565b60405180910390fd5b6000600660008686604051602001614c0d929190616b1d565b604051602081830303815290604052805190602001208152602001908152602001600020549050818111614c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c6d90616cc7565b60405180910390fd5b6000614c828585610307565b9050828111614cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614cbd90616d8a565b60405180910390fd5b6000600660008887604051602001614cdf929190616b1d565b604051602081830303815290604052805190602001208152602001908152602001600020549050838101905080600660008988604051602001614d23929190616b1d565b60405160208183030381529060405280519060200120815260200190815260200160002081905550838303925082600660008989604051602001614d68929190616b1d565b60405160208183030381529060405280519060200120815260200190815260200160002081905550838203915081600760008888604051602001614dad929190616a54565b6040516020818303038152906040528051906020012081526020019081526020016000208190555050505050505050565b60608082604051602001614df29190616a80565b604051602081830303815290604052905060606040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506060600283510260020167ffffffffffffffff81118015614e5d57600080fd5b506040519080825280601f01601f191660200182016040528015614e905781602001600182028036833780820191505090505b50905060008090505b8351811015614fc357826004858381518110614eb157fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110614ef057fe5b602001015160f81c60f81b826002830260000181518110614f0d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b858381518110614f4e57fe5b602001015160f81c60f81b1660f81c60ff1681518110614f6a57fe5b602001015160f81c60f81b826002830260010181518110614f8757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614e99565b50809350505050919050565b60606000821415614ff15760405180","6020016040528060008152509050615160565b6000809050600080905060008090506000809050606088905060008090505b8151841015615054578883141561502957839550600190505b8789018314156150395785840394505b61504382856151f5565b840193508280600101935050615010565b8789018314156150645785840394505b806150a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161509b90616e0a565b60405180910390fd5b60008514156150e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016150df90616eca565b60405180910390fd5b60608567ffffffffffffffff8111801561510157600080fd5b506040519080825280601f01601f1916602001820160405280156151345781602001600182028036833780820191505090505b50905060008060208d019150602083019050615153818a84018a615455565b8299505050505050505050505b9392505050565b6060815183510167ffffffffffffffff8111801561518457600080fd5b506040519080825280601f01601f1916602001820160405280156151b75781602001600182028036833780820191505090505b50905060008060006020860192506020850191506020840190506151dd81848851615455565b6151ec86518201838751615455565b50505092915050565b60008060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600784848151811061522b57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561528b576001905061544f565b600660f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660058484815181106152c057fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415615320576002905061544f565b600e60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600484848151811061535557fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156153b5576003905061544f565b601e60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660038484815181106153ea57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561544a576004905061544f565b600190505b92915050565b5b602081106154795781518352602083019250602082019150602081039050615456565b60006001826020036101000a0390508019835116818551168181178652505050505050565b604051806101e001604052806060815260200160608152602001606081526020016060815260200160608152602001600060ff1681526020016060815260200160608152602001600060038111156154f257fe5b81526020016000600281111561550457fe5b815260200160608152602001615518615544565b815260200161552561567b565b8152602001606081526020016000600281111561553e57fe5b81525090565b60405180606001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106155bc57805160ff19168380011785556155ea565b828001600101855582156155ea579182015b828111156155e95782518255916020019190600101906155ce565b5b5090506155f791906156b2565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061563c57805160ff191683800117855561566a565b8280016001018555821561566a579182015b8281111561566957825182559160200191906001019061564e565b5b50905061567791906156b2565b5090565b60405180606001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6156d491905b808211156156d05760008160009055506001016156b8565b5090565b90565b6000813590506156e681617436565b92915050565b6000813590506156fb8161744d565b92915050565b600082601f83011261571257600080fd5b81356157256157208261716a565b61713d565b9150808252602083016020830185838301111561574157600080fd5b61574c83828461735b565b50505092915050565b600082601f83011261576657600080fd5b81516157796157748261716a565b61713d565b9150808252602083016020830185838301111561579557600080fd5b6157a083828461736a565b50505092915050565b6000813590506157b881617464565b92915050565b600082601f8301126157cf57600080fd5b81356157e26157dd82617196565b61713d565b915080825260208301602083018583830111156157fe57600080fd5b61580983828461735b565b50505092915050565b600082601f83011261582357600080fd5b815161583661583182617196565b61713d565b9150808252602083016020830185838301111561585257600080fd5b61585d83828461736a565b50505092915050565b60008135905061587581617474565b92915050565b60008151905061588a81617474565b92915050565b60008135905061589f8161748b565b92915050565b6000602082840312156158b757600080fd5b60006158c5848285016156d7565b91505092915050565b600080604083850312156158e157600080fd5b60006158ef858286016156d7565b9250506020615900858286016156d7565b9150509250929050565b60008060006060848603121561591f57600080fd5b600061592d868287016156d7565b935050602061593e868287016156d7565b925050604061594f86828701615866565b9150509250925092565b60008060008060008060008060006101208a8c03121561597857600080fd5b60006159868c828d016156d7565b99505060208a013567ffffffffffffffff8111156159a357600080fd5b6159af8c828d016157be565b98505060408a013567ffffffffffffffff8111156159cc57600080fd5b6159d88c828d016157be565b97505060608a013567ffffffffffffffff8111156159f557600080fd5b615a018c828d016157be565b9650506080615a128c828d01615890565b95505060a08a013567ffffffffffffffff811115615a2f57600080fd5b615a3b8c828d01615701565b94505060c08a013567ffffffffffffffff811115615a5857600080fd5b615a648c828d016157be565b93505060e08a013567ffffffffffffffff811115615a8157600080fd5b615a8d8c828d016157be565b9250506101008a013567ffffffffffffffff811115615aab57600080fd5b615ab78c828d016157be565b9150509295985092959850929598565b60008060408385031215615ada57600080fd5b6000615ae8858286016156d7565b9250506020615af985828601615866565b9150509250929050565b600060208284031215615b1557600080fd5b600082013567ffffffffffffffff811115615b2f57600080fd5b615b3b848285016157be565b91505092915050565b60008060408385031215615b5757600080fd5b600083013567ffffffffffffffff811115615b7157600080fd5b615b7d858286016157be565b9250506020615b8e858286016156ec565b9150509250929050565b60008060008060008060008060008060006101608c8e031215615bba57600080fd5b60008c013567ffffffffffffffff811115615bd457600080fd5b615be08e828f016157be565b9b50506020615bf18e828f016156ec565b9a505060408c013567ffffffffffffffff811115615c0e57600080fd5b615c1a8e828f016157be565b99505060608c013567ffffffffffffffff811115615c3757600080fd5b615c438e828f016157be565b9850506080615c548e828f01615890565b97505060a08c013567ffffffffffffffff811115615c7157600080fd5b615c7d8e828f016157be565b96505060c08c013567ffffffffffffffff811115615c9a57600080fd5b615ca68e828f01615701565b95505060e08c013567ffffffffffffffff811115615cc357600080fd5b615ccf8e828f016157be565b9450506101008c013567ffffffffffffffff811115615ced57600080fd5b615cf98e828f016157be565b9350506101208c013567ffffffffffffffff811115615d1757600080fd5b615d238e828f016157be565b9250506101408c013567ffffffffffffffff811115615d4157600080fd5b615d4d8e828f01615701565b9150509295989b509295989b9093969950565b600080600060608486031215615d7557600080fd5b600084015167ffffffffffffffff811115615d8f57600080fd5b615d9b86828701615812565b935050602084015167ffffffffffffffff811115615db857600080fd5b615dc486828701615755565b925050604084015167ffffffffffffffff811115615de157600080fd5b615ded86828701615755565b9150509250925092565b60008060008060808587031215615e0d57600080fd5b600085013567ffffffffffffffff811115615e2757600080fd5b615e33878288016157be565b9450506020615e44878288016157a9565b935050604085013567ffffffffffffffff811115615e6157600080fd5b615e6d878288016157be565b925050606085013567ffffffffffffffff811115615e8a57600080fd5b615e9687828801615701565b91505092959194509250565b600060208284031215615eb457600080fd5b6000615ec28482850161587b565b91505092915050565b60008060408385031215615ede57600080fd5b6000615eec8582860161587b565b925050602083015167ffffffffffffffff811115615f0957600080fd5b615f1585828601615812565b9150509250929050565b600080600080600060a08688031215615f3757600080fd5b6000615f458882890161587b565b9550506020615f568882890161587b565b945050604086015167ffffffffffffffff811115615f7357600080fd5b615f7f88828901615812565b9350506060615f908882890161587b565b925050608086015167ffffffffffffffff811115615fad57600080fd5b615fb988828901615812565b9150509295509295909350565b615fcf816172ef565b82525050565b615fe6615fe1826172","","60820190508181036000830152616ff481616841565b9050818103602083015261700881856160d7565b905061701760408301846169f3565b9392505050565b6000608082019050818103600083015261703781616881565b90506170466020830186615fec565b6170536040830185615fec565b61706060608301846169cd565b949350505050565b60006060820190508181036000830152617081816168c1565b90506170906020830185615fec565b61709d60408301846169cd565b9392505050565b600060208201905081810360008301526170bd81616901565b9050919050565b600060208201905081810360008301526170dd81616967565b9050919050565b60006020820190506170f960008301846169cd565b92915050565b600060608201905061711460008301866169cd565b818103602083015261712681856160d7565b90506171356040830184615fec565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561716057600080fd5b8060405250919050565b600067ffffffffffffffff82111561718157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156171ad57600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000617230826172b8565b9050919050565b6000617242826172b8565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061728d8261740f565b919050565b60008190506172a08261741c565b919050565b60008190506172b382617429565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006172fa82617337565b9050919050565b600061730c8261727f565b9050919050565b600061731e82617292565b9050919050565b6000617330826172a5565b9050919050565b600061734282617349565b9050919050565b6000617354826172b8565b9050919050565b82818337600083830152505050565b60005b8381101561738857808201518184015260208101905061736d565b83811115617397576000848401525b50505050565b60006173a8826173d5565b9050919050565b60006173ba826173d5565b9050919050565b6000819050919050565b6000819050919050565b60006173e082617402565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b6003811061741957fe5b50565b6003811061742657fe5b50565b6004811061743357fe5b50565b61743f81617225565b811461744a57600080fd5b50565b61745681617237565b811461746157600080fd5b50565b6004811061747157600080fd5b50565b61747d816172d8565b811461748857600080fd5b50565b617494816172e2565b811461749f57600080fd5b5056fea2646970667358221220b84556672330a8da2ec81f58464e1bac78425a3b43c60416c3f7ead3e4e1621064736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b506174d880620000216000396000f3fe6080604052600436106100c25760003560e01c8063b386e6a31161007f578063e1e73bf711610059578063e1e73bf71461025a578063eb11cb0114610297578063ecb905ca146102b3578063fd934f77146102de576100c2565b8063b386e6a3146101cb578063cc8be70e146101f4578063dd29306314610231576100c2565b8063117b5418146100c7578063220ef8b0146100f05780634e5a7bd2146101195780636904e965146101425780637c7ec1a41461016b5780639ac57656146101af575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e991906158a5565b610307565b005b3480156100fc57600080fd5b506101176004803603810190610112919061590a565b610450565b005b34801561012557600080fd5b50610140600480360381019061013b9190615b44565b61045d565b005b34801561014e57600080fd5b5061016960048036038101906101649190615ac7565b6112ac565b005b34801561017757600080fd5b50610192600480360381019061018d9190615b03565b6112b8565b6040516101a6989796959493929190616b49565b60405180910390f35b6101c960048036038101906101c49190615b98565b611cd0565b005b3480156101d757600080fd5b506101f260048036038101906101ed91906158a5565b61228f565b005b34801561020057600080fd5b5061021b600480360381019061021691906158a5565b61232a565b60405161022891906170e4565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190615b03565b612371565b005b34801561026657600080fd5b50610281600480360381019061027c91906158ce565b61240c565b60405161028e91906170e4565b60405180910390f35b6102b160048036038101906102ac9190615959565b612500565b005b3480156102bf57600080fd5b506102c86129af565b6040516102d59190616bea565b60405180910390f35b3480156102ea57600080fd5b5061030560048036038101906103009190615df7565b612a51565b005b60001515600a60009054906101000a900460ff1615151461035d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161035490616eed565b60405180910390fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600281526020017f5631000000000000000000000000000000000000000000000000000000000000815250600490805190602001906103e992919061549e565b506000600981905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60006101000a81548160ff02191690831515021790555050565b6104586139af565b505050565b61046561551e565b600560008460405160200161047a9190616ada565b604051602081830303815290604052805190602001208152602001908152602001600020604051806101e0016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e55780601f106105ba576101008083540402835291602001916105e5565b820191906000526020600020905b8154815290600101906020018083116105c857829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020016005820160009054906101000a900460ff1660ff1660ff168152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092c5780601f106109015761010080835404028352916020019161092c565b820191906000526020600020905b81548152906001019060200180831161090f57829003601f168201915b505050505081526020016008820160009054906101000a900460ff16600381111561095357fe5b600381111561095e57fe5b81526020016008820160019054906101000a900460ff16600281111561098057fe5b600281111561098b57fe5b8152602001600982018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b50505050508152602001600a820160405180606001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001600d820160405180606001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001601082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b505050505081526020016011820160009054906101000a900460ff166002811115610d1d57fe5b6002811115610d2857fe5b81525050905060006002811115610d3b57fe5b816101c001516002811115610d4c57fe5b14610d8c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610d8390616dca565b60405180910390fd5b600380811115610d9857fe5b8161010001516003811115610da957fe5b1480610dd0575060026003811115610dbd57fe5b8161010001516003811115610dce57fe5b145b610e0f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e0690616ce7565b60405180910390fd5b6060610e1a336139fc565b90508160600151604051602001610e319190616ada565b6040516020818303038152906040528051906020012081604051602001610e589190616ada565b6040516020818303038152906040528051906020012014610eae576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610ea590616daa565b60405180910390fd5b60016002811115610ebb57fe5b8261012001516002811115610ecc57fe5b14610f0c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610f0390616e6d565b60405180910390fd5b60008260a0015160ff161415610f3057610f2b8260c001513085613ca7565b610f74565b60018260a0015160ff161415610f5357610f4e8260c0015184613dd9565b610f73565b60028260a0015160ff161415610f7257610f718260c0015184613e41565b5b5b5b60028261012001906002811115610f8757fe5b90816002811115610f9457fe5b81525050816005600086604051602001610fae9190616ada565b604051602081830303815290604052805190602001208152602001908152602001600020600082015181600001908051","","","","","","","60006060820190508181036000830152616ff781616827565b90506170066020830185615fec565b61701360408301846169cd565b9392505050565b6000602082019050818103600083015261703381616867565b9050919050565b60006020820190508181036000830152617053816168a7565b9050919050565b60006020820190508181036000830152617073816168e7565b9050919050565b600060808201905081810360008301526170938161694d565b90506170a26020830186615fec565b6170af6040830185615fec565b6170bc60608301846169cd565b949350505050565b600060208201905081810360008301526170dd8161698d565b9050919050565b60006020820190506170f960008301846169cd565b92915050565b600060608201905061711460008301866169cd565b818103602083015261712681856160d7565b90506171356040830184615fec565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561716057600080fd5b8060405250919050565b600067ffffffffffffffff82111561718157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156171ad57600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000617230826172b8565b9050919050565b6000617242826172b8565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061728d8261740f565b919050565b60008190506172a08261741c565b919050565b60008190506172b382617429565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006172fa82617337565b9050919050565b600061730c8261727f565b9050919050565b600061731e82617292565b9050919050565b6000617330826172a5565b9050919050565b600061734282617349565b9050919050565b6000617354826172b8565b9050919050565b82818337600083830152505050565b60005b8381101561738857808201518184015260208101905061736d565b83811115617397576000848401525b50505050565b60006173a8826173d5565b9050919050565b60006173ba826173d5565b9050919050565b6000819050919050565b6000819050919050565b60006173e082617402565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b6003811061741957fe5b50565b6003811061742657fe5b50565b6004811061743357fe5b50565b61743f81617225565b811461744a57600080fd5b50565b61745681617237565b811461746157600080fd5b50565b6004811061747157600080fd5b50565b61747d816172d8565b811461748857600080fd5b50565b617494816172e2565b811461749f57600080fd5b5056fea2646970667358221220c0f69e0fe4cf75b067c9399dd83cf84582cb977b234128a7b995c4db06da7e9664736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"sendAckedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"sendTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain_Code\",\"type\":\"string\"}],\"name\":\"setChainCodeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway_Address\",\"type\":\"address\"}],\"name\":\"setGatewayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cross_TxNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"startTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeOutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"}],\"name\":\"getCrossTx\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"enum Storage.TxResultEnum\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum Storage.TxRefundedEnum\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum Storage.TxOriginEnum\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainAdd\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"enum Storage.TxResultEnum\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"sendAcked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"srcBid\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"destAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"srcChainCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destChainCode\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"sendTx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainCode\",\"type\":\"string\"}],\"name\":\"setChainCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatewayAddress\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"destBid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"srcChainCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destChainCode\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"startTx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"crossTxNo\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETALLOWANCE = "getAllowance";

    public static final String FUNC_GETCROSSTX = "getCrossTx";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SENDACKED = "sendAcked";

    public static final String FUNC_SENDTX = "sendTx";

    public static final String FUNC_SETCHAINCODE = "setChainCode";

    public static final String FUNC_SETGATEWAY = "setGateway";

    public static final String FUNC_STARTTX = "startTx";

    public static final String FUNC_TAKEOUT = "takeOut";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event ASSETBURNEVENT_EVENT = new Event("AssetBurnEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETMINTEVENT_EVENT = new Event("AssetMintEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVEEVENT_EVENT = new Event("approveEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDACKEDEVENT_EVENT = new Event("sendAckedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SENDTXEVENT_EVENT = new Event("sendTxEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SETCHAINCODEEVENT_EVENT = new Event("setChainCodeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETGATEWAYEVENT_EVENT = new Event("setGatewayEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event STARTTXEVENT_EVENT = new Event("startTxEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event TAKEOUTEVENT_EVENT = new Event("takeOutEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("transferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected CrossChainContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<AssetBurnEventEventResponse> getAssetBurnEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETBURNEVENT_EVENT, transactionReceipt);
        ArrayList<AssetBurnEventEventResponse> responses = new ArrayList<AssetBurnEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AssetBurnEventEventResponse typedResponse = new AssetBurnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAssetBurnEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETBURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAssetBurnEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETBURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AssetMintEventEventResponse> getAssetMintEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETMINTEVENT_EVENT, transactionReceipt);
        ArrayList<AssetMintEventEventResponse> responses = new ArrayList<AssetMintEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AssetMintEventEventResponse typedResponse = new AssetMintEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAssetMintEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETMINTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAssetMintEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETMINTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveEventEventResponse> getApproveEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEEVENT_EVENT, transactionReceipt);
        ArrayList<ApproveEventEventResponse> responses = new ArrayList<ApproveEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveEventEventResponse typedResponse = new ApproveEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SendAckedEventEventResponse> getSendAckedEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDACKEDEVENT_EVENT, transactionReceipt);
        ArrayList<SendAckedEventEventResponse> responses = new ArrayList<SendAckedEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendAckedEventEventResponse typedResponse = new SendAckedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSendAckedEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDACKEDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSendAckedEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDACKEDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SendTxEventEventResponse> getSendTxEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDTXEVENT_EVENT, transactionReceipt);
        ArrayList<SendTxEventEventResponse> responses = new ArrayList<SendTxEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendTxEventEventResponse typedResponse = new SendTxEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSendTxEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSendTxEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SENDTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetChainCodeEventEventResponse> getSetChainCodeEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETCHAINCODEEVENT_EVENT, transactionReceipt);
        ArrayList<SetChainCodeEventEventResponse> responses = new ArrayList<SetChainCodeEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetChainCodeEventEventResponse typedResponse = new SetChainCodeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chain_Code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetChainCodeEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETCHAINCODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetChainCodeEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETCHAINCODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetGatewayEventEventResponse> getSetGatewayEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETGATEWAYEVENT_EVENT, transactionReceipt);
        ArrayList<SetGatewayEventEventResponse> responses = new ArrayList<SetGatewayEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetGatewayEventEventResponse typedResponse = new SetGatewayEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.gateway_Address = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetGatewayEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETGATEWAYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetGatewayEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETGATEWAYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StartTxEventEventResponse> getStartTxEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(STARTTXEVENT_EVENT, transactionReceipt);
        ArrayList<StartTxEventEventResponse> responses = new ArrayList<StartTxEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            StartTxEventEventResponse typedResponse = new StartTxEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cross_TxNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStartTxEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STARTTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStartTxEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STARTTXEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TakeOutEventEventResponse> getTakeOutEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TAKEOUTEVENT_EVENT, transactionReceipt);
        ArrayList<TakeOutEventEventResponse> responses = new ArrayList<TakeOutEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TakeOutEventEventResponse typedResponse = new TakeOutEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTakeOutEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TAKEOUTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTakeOutEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TAKEOUTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt approve(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approve(String from, String to, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger balanceOf(String addr) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAllowance(String owner, String spender) throws ContractException {
        final Function function = new Function(FUNC_GETALLOWANCE, 
                Arrays.<Type>asList(new Address(owner),
                new Address(spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<byte[], byte[], BigInteger, BigInteger, BigInteger, byte[], byte[], byte[]> getCrossTx(String crossTxNo) throws ContractException {
        final Function function = new Function(FUNC_GETCROSSTX, 
                Arrays.<Type>asList(new Utf8String(crossTxNo)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<byte[], byte[], BigInteger, BigInteger, BigInteger, byte[], byte[], byte[]>(
                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (byte[]) results.get(5).getValue(), 
                (byte[]) results.get(6).getValue(), 
                (byte[]) results.get(7).getValue());
    }

    public String getVersion() throws ContractException {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt initialize(String crossChainAdd) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initialize(String crossChainAdd, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitialize(String crossChainAdd) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(crossChainAdd)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitializeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt sendAcked(String crossTxNo, BigInteger result, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Uint8(result),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sendAcked(String crossTxNo, BigInteger result, String version, byte[] proof, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Uint8(result),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendAcked(String crossTxNo, BigInteger result, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDACKED, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Uint8(result),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, byte[]> getSendAckedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDACKED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public TransactionReceipt sendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTx(String srcBid, String destAddress, String srcChainCode, String destChainCode, BigInteger txType, String crossTxNo, byte[] payload, String extension, String remark, String version, byte[] proof) {
        final Function function = new Function(
                FUNC_SENDTX, 
                Arrays.<Type>asList(new Utf8String(srcBid),
                new Address(destAddress),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new Utf8String(crossTxNo),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version),
                new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple11<String, String, String, String, BigInteger, String, byte[], String, String, String, byte[]> getSendTxInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple11<String, String, String, String, BigInteger, String, byte[], String, String, String, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (byte[]) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue(), 
                (byte[]) results.get(10).getValue()
                );
    }

    public TransactionReceipt setChainCode(String chainCode) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chainCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setChainCode(String chainCode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chainCode)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetChainCode(String chainCode) {
        final Function function = new Function(
                FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(new Utf8String(chainCode)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetChainCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHAINCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGateway(String gatewayAddress) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGateway(String gatewayAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGateway(String gatewayAddress) {
        final Function function = new Function(
                FUNC_SETGATEWAY, 
                Arrays.<Type>asList(new Address(gatewayAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGatewayInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGATEWAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt startTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void startTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartTx(String srcAddress, String destBid, String srcChainCode, String destChainCode, BigInteger txType, byte[] payload, String extension, String remark, String version) {
        final Function function = new Function(
                FUNC_STARTTX, 
                Arrays.<Type>asList(new Address(srcAddress),
                new Utf8String(destBid),
                new Utf8String(srcChainCode),
                new Utf8String(destChainCode),
                new Uint8(txType),
                new DynamicBytes(payload),
                new Utf8String(extension),
                new Utf8String(remark),
                new Utf8String(version)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<String, String, String, String, BigInteger, byte[], String, String, String> getStartTxInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STARTTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, String, String, String, BigInteger, byte[], String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (byte[]) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public TransactionReceipt takeOut(String crossTxNo, String to) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void takeOut(String crossTxNo, String to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTakeOut(String crossTxNo, String to) {
        final Function function = new Function(
                FUNC_TAKEOUT, 
                Arrays.<Type>asList(new Utf8String(crossTxNo),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getTakeOutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TAKEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String to, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public static CrossChainContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CrossChainContract(contractAddress, client, credential);
    }

    public static CrossChainContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CrossChainContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AssetBurnEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String from;

        public BigInteger value;
    }

    public static class AssetMintEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ApproveEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public BigInteger value;
    }

    public static class SendAckedEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class SendTxEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class SetChainCodeEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String chain_Code;
    }

    public static class SetGatewayEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String gateway_Address;
    }

    public static class StartTxEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String cross_TxNo;

        public BigInteger txType;
    }

    public static class TakeOutEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public String to;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public String operation;

        public BigInteger value;
    }
}
